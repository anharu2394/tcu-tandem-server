// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: tandem.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TandemService_GetData_FullMethodName  = "/tandem.TandemService/GetData"
	TandemService_SendData_FullMethodName = "/tandem.TandemService/SendData"
)

// TandemServiceClient is the client API for TandemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TandemServiceClient interface {
	GetData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDataResponse], error)
	SendData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendDataRequest, emptypb.Empty], error)
}

type tandemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTandemServiceClient(cc grpc.ClientConnInterface) TandemServiceClient {
	return &tandemServiceClient{cc}
}

func (c *tandemServiceClient) GetData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TandemService_ServiceDesc.Streams[0], TandemService_GetData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, GetDataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TandemService_GetDataClient = grpc.ServerStreamingClient[GetDataResponse]

func (c *tandemServiceClient) SendData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendDataRequest, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TandemService_ServiceDesc.Streams[1], TandemService_SendData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendDataRequest, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TandemService_SendDataClient = grpc.ClientStreamingClient[SendDataRequest, emptypb.Empty]

// TandemServiceServer is the server API for TandemService service.
// All implementations must embed UnimplementedTandemServiceServer
// for forward compatibility.
type TandemServiceServer interface {
	GetData(*emptypb.Empty, grpc.ServerStreamingServer[GetDataResponse]) error
	SendData(grpc.ClientStreamingServer[SendDataRequest, emptypb.Empty]) error
	mustEmbedUnimplementedTandemServiceServer()
}

// UnimplementedTandemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTandemServiceServer struct{}

func (UnimplementedTandemServiceServer) GetData(*emptypb.Empty, grpc.ServerStreamingServer[GetDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedTandemServiceServer) SendData(grpc.ClientStreamingServer[SendDataRequest, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedTandemServiceServer) mustEmbedUnimplementedTandemServiceServer() {}
func (UnimplementedTandemServiceServer) testEmbeddedByValue()                       {}

// UnsafeTandemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TandemServiceServer will
// result in compilation errors.
type UnsafeTandemServiceServer interface {
	mustEmbedUnimplementedTandemServiceServer()
}

func RegisterTandemServiceServer(s grpc.ServiceRegistrar, srv TandemServiceServer) {
	// If the following call pancis, it indicates UnimplementedTandemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TandemService_ServiceDesc, srv)
}

func _TandemService_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TandemServiceServer).GetData(m, &grpc.GenericServerStream[emptypb.Empty, GetDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TandemService_GetDataServer = grpc.ServerStreamingServer[GetDataResponse]

func _TandemService_SendData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TandemServiceServer).SendData(&grpc.GenericServerStream[SendDataRequest, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TandemService_SendDataServer = grpc.ClientStreamingServer[SendDataRequest, emptypb.Empty]

// TandemService_ServiceDesc is the grpc.ServiceDesc for TandemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TandemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tandem.TandemService",
	HandlerType: (*TandemServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _TandemService_GetData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendData",
			Handler:       _TandemService_SendData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "tandem.proto",
}
