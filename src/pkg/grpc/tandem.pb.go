// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: tandem.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 1件のタンデム加速器データを表すメッセージ
type TandemData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// --- 基本情報 ---
	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`               // 一意のID
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // タイムスタンプ（UTC）
	// --- 元データ（実測値） ---
	BeamCurrentIn     float64 `protobuf:"fixed64,3,opt,name=beam_current_in,json=beamCurrentIn,proto3" json:"beam_current_in,omitempty"`             // 入射ファラデー電流
	BeamCurrentOut    float64 `protobuf:"fixed64,4,opt,name=beam_current_out,json=beamCurrentOut,proto3" json:"beam_current_out,omitempty"`          // 加速後の電流
	ChargeCurrent     float64 `protobuf:"fixed64,5,opt,name=charge_current,json=chargeCurrent,proto3" json:"charge_current,omitempty"`               // チャージ電流
	Gvm               string  `protobuf:"bytes,6,opt,name=gvm,proto3" json:"gvm,omitempty"`                                                          // GVM（Gate Valve Monitor）電圧
	ChargePowerSupply float64 `protobuf:"fixed64,7,opt,name=charge_power_supply,json=chargePowerSupply,proto3" json:"charge_power_supply,omitempty"` // チャージ電源
	Le                float64 `protobuf:"fixed64,8,opt,name=le,proto3" json:"le,omitempty"`                                                          // Low Energy 側の電圧
	He                float64 `protobuf:"fixed64,9,opt,name=he,proto3" json:"he,omitempty"`                                                          // High Energy 側の電圧
	Cpo               float64 `protobuf:"fixed64,10,opt,name=cpo,proto3" json:"cpo,omitempty"`                                                       // C.P.O（不明な略称、仕様に準ずる）
	ProbeCurrent      float64 `protobuf:"fixed64,11,opt,name=probe_current,json=probeCurrent,proto3" json:"probe_current,omitempty"`                 // プローブ電流
	ProbePosition     float64 `protobuf:"fixed64,12,opt,name=probe_position,json=probePosition,proto3" json:"probe_position,omitempty"`              // プローブ位置
	ExperimentId      string  `protobuf:"bytes,13,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`                   // 実験ID（任意）
	// --- 拡張指標（分析・評価値） ---
	TransmissionRatio     float64 `protobuf:"fixed64,14,opt,name=transmission_ratio,json=transmissionRatio,proto3" json:"transmission_ratio,omitempty"`               // 透過率（加速後 / 入射）
	TransmissionSlope     float64 `protobuf:"fixed64,15,opt,name=transmission_slope,json=transmissionSlope,proto3" json:"transmission_slope,omitempty"`               // 透過率の傾き（100点より回帰）
	TransmissionVariance  float64 `protobuf:"fixed64,16,opt,name=transmission_variance,json=transmissionVariance,proto3" json:"transmission_variance,omitempty"`      // 透過率の分散
	BeamLossRatio         float64 `protobuf:"fixed64,17,opt,name=beam_loss_ratio,json=beamLossRatio,proto3" json:"beam_loss_ratio,omitempty"`                         // HE / LE（ビーム損失係数）
	GvmChargeSlope        float64 `protobuf:"fixed64,18,opt,name=gvm_charge_slope,json=gvmChargeSlope,proto3" json:"gvm_charge_slope,omitempty"`                      // GVMとチャージ電源の連動性の傾き
	GvmChargeVariance     float64 `protobuf:"fixed64,19,opt,name=gvm_charge_variance,json=gvmChargeVariance,proto3" json:"gvm_charge_variance,omitempty"`             // GVMとチャージ電源の連動性の分散
	GvmChargeCorrelation  float64 `protobuf:"fixed64,20,opt,name=gvm_charge_correlation,json=gvmChargeCorrelation,proto3" json:"gvm_charge_correlation,omitempty"`    // GVMとチャージ電源の相関係数（またはスコア）
	ChargeCurrentSlope    float64 `protobuf:"fixed64,21,opt,name=charge_current_slope,json=chargeCurrentSlope,proto3" json:"charge_current_slope,omitempty"`          // チャージ電流の傾き
	ChargeCurrentVariance float64 `protobuf:"fixed64,22,opt,name=charge_current_variance,json=chargeCurrentVariance,proto3" json:"charge_current_variance,omitempty"` // チャージ電流の分散
	GvmSlope              float64 `protobuf:"fixed64,23,opt,name=gvm_slope,json=gvmSlope,proto3" json:"gvm_slope,omitempty"`                                          // GVMの傾き
	GvmVariance           float64 `protobuf:"fixed64,24,opt,name=gvm_variance,json=gvmVariance,proto3" json:"gvm_variance,omitempty"`                                 // GVMの分散
	LeHeDifference        float64 `protobuf:"fixed64,26,opt,name=le_he_difference,json=leHeDifference,proto3" json:"le_he_difference,omitempty"`                      // LEとHEの差分
	ProbeCurrentSlope     float64 `protobuf:"fixed64,27,opt,name=probe_current_slope,json=probeCurrentSlope,proto3" json:"probe_current_slope,omitempty"`             // プローブ電流の傾き
	ProbeCurrentVariance  float64 `protobuf:"fixed64,28,opt,name=probe_current_variance,json=probeCurrentVariance,proto3" json:"probe_current_variance,omitempty"`    // プローブ電流の分散
	Score_1               float64 `protobuf:"fixed64,29,opt,name=score_1,json=score1,proto3" json:"score_1,omitempty"`                                                // 透過率に関する総合スコア
	Score_2               float64 `protobuf:"fixed64,30,opt,name=score_2,json=score2,proto3" json:"score_2,omitempty"`                                                // ビーム損失に関する総合スコア
	Score_3               float64 `protobuf:"fixed64,31,opt,name=score_3,json=score3,proto3" json:"score_3,omitempty"`                                                // GVM-チャージ電源連動性の総合スコア
	Score_4               float64 `protobuf:"fixed64,32,opt,name=score_4,json=score4,proto3" json:"score_4,omitempty"`                                                // チャージ電流安定性の総合スコア
	Score_5               float64 `protobuf:"fixed64,33,opt,name=score_5,json=score5,proto3" json:"score_5,omitempty"`                                                // GVM安定性の総合スコア
	StabilityScore        float64 `protobuf:"fixed64,25,opt,name=stability_score,json=stabilityScore,proto3" json:"stability_score,omitempty"`                        // 総合安定性スコア（上記6指標の平均）
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TandemData) Reset() {
	*x = TandemData{}
	mi := &file_tandem_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TandemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TandemData) ProtoMessage() {}

func (x *TandemData) ProtoReflect() protoreflect.Message {
	mi := &file_tandem_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TandemData.ProtoReflect.Descriptor instead.
func (*TandemData) Descriptor() ([]byte, []int) {
	return file_tandem_proto_rawDescGZIP(), []int{0}
}

func (x *TandemData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TandemData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TandemData) GetBeamCurrentIn() float64 {
	if x != nil {
		return x.BeamCurrentIn
	}
	return 0
}

func (x *TandemData) GetBeamCurrentOut() float64 {
	if x != nil {
		return x.BeamCurrentOut
	}
	return 0
}

func (x *TandemData) GetChargeCurrent() float64 {
	if x != nil {
		return x.ChargeCurrent
	}
	return 0
}

func (x *TandemData) GetGvm() string {
	if x != nil {
		return x.Gvm
	}
	return ""
}

func (x *TandemData) GetChargePowerSupply() float64 {
	if x != nil {
		return x.ChargePowerSupply
	}
	return 0
}

func (x *TandemData) GetLe() float64 {
	if x != nil {
		return x.Le
	}
	return 0
}

func (x *TandemData) GetHe() float64 {
	if x != nil {
		return x.He
	}
	return 0
}

func (x *TandemData) GetCpo() float64 {
	if x != nil {
		return x.Cpo
	}
	return 0
}

func (x *TandemData) GetProbeCurrent() float64 {
	if x != nil {
		return x.ProbeCurrent
	}
	return 0
}

func (x *TandemData) GetProbePosition() float64 {
	if x != nil {
		return x.ProbePosition
	}
	return 0
}

func (x *TandemData) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

func (x *TandemData) GetTransmissionRatio() float64 {
	if x != nil {
		return x.TransmissionRatio
	}
	return 0
}

func (x *TandemData) GetTransmissionSlope() float64 {
	if x != nil {
		return x.TransmissionSlope
	}
	return 0
}

func (x *TandemData) GetTransmissionVariance() float64 {
	if x != nil {
		return x.TransmissionVariance
	}
	return 0
}

func (x *TandemData) GetBeamLossRatio() float64 {
	if x != nil {
		return x.BeamLossRatio
	}
	return 0
}

func (x *TandemData) GetGvmChargeSlope() float64 {
	if x != nil {
		return x.GvmChargeSlope
	}
	return 0
}

func (x *TandemData) GetGvmChargeVariance() float64 {
	if x != nil {
		return x.GvmChargeVariance
	}
	return 0
}

func (x *TandemData) GetGvmChargeCorrelation() float64 {
	if x != nil {
		return x.GvmChargeCorrelation
	}
	return 0
}

func (x *TandemData) GetChargeCurrentSlope() float64 {
	if x != nil {
		return x.ChargeCurrentSlope
	}
	return 0
}

func (x *TandemData) GetChargeCurrentVariance() float64 {
	if x != nil {
		return x.ChargeCurrentVariance
	}
	return 0
}

func (x *TandemData) GetGvmSlope() float64 {
	if x != nil {
		return x.GvmSlope
	}
	return 0
}

func (x *TandemData) GetGvmVariance() float64 {
	if x != nil {
		return x.GvmVariance
	}
	return 0
}

func (x *TandemData) GetLeHeDifference() float64 {
	if x != nil {
		return x.LeHeDifference
	}
	return 0
}

func (x *TandemData) GetProbeCurrentSlope() float64 {
	if x != nil {
		return x.ProbeCurrentSlope
	}
	return 0
}

func (x *TandemData) GetProbeCurrentVariance() float64 {
	if x != nil {
		return x.ProbeCurrentVariance
	}
	return 0
}

func (x *TandemData) GetScore_1() float64 {
	if x != nil {
		return x.Score_1
	}
	return 0
}

func (x *TandemData) GetScore_2() float64 {
	if x != nil {
		return x.Score_2
	}
	return 0
}

func (x *TandemData) GetScore_3() float64 {
	if x != nil {
		return x.Score_3
	}
	return 0
}

func (x *TandemData) GetScore_4() float64 {
	if x != nil {
		return x.Score_4
	}
	return 0
}

func (x *TandemData) GetScore_5() float64 {
	if x != nil {
		return x.Score_5
	}
	return 0
}

func (x *TandemData) GetStabilityScore() float64 {
	if x != nil {
		return x.StabilityScore
	}
	return 0
}

var File_tandem_proto protoreflect.FileDescriptor

const file_tandem_proto_rawDesc = "" +
	"\n" +
	"\ftandem.proto\x12\x06tandem\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xdf\t\n" +
	"\n" +
	"TandemData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12&\n" +
	"\x0fbeam_current_in\x18\x03 \x01(\x01R\rbeamCurrentIn\x12(\n" +
	"\x10beam_current_out\x18\x04 \x01(\x01R\x0ebeamCurrentOut\x12%\n" +
	"\x0echarge_current\x18\x05 \x01(\x01R\rchargeCurrent\x12\x10\n" +
	"\x03gvm\x18\x06 \x01(\tR\x03gvm\x12.\n" +
	"\x13charge_power_supply\x18\a \x01(\x01R\x11chargePowerSupply\x12\x0e\n" +
	"\x02le\x18\b \x01(\x01R\x02le\x12\x0e\n" +
	"\x02he\x18\t \x01(\x01R\x02he\x12\x10\n" +
	"\x03cpo\x18\n" +
	" \x01(\x01R\x03cpo\x12#\n" +
	"\rprobe_current\x18\v \x01(\x01R\fprobeCurrent\x12%\n" +
	"\x0eprobe_position\x18\f \x01(\x01R\rprobePosition\x12#\n" +
	"\rexperiment_id\x18\r \x01(\tR\fexperimentId\x12-\n" +
	"\x12transmission_ratio\x18\x0e \x01(\x01R\x11transmissionRatio\x12-\n" +
	"\x12transmission_slope\x18\x0f \x01(\x01R\x11transmissionSlope\x123\n" +
	"\x15transmission_variance\x18\x10 \x01(\x01R\x14transmissionVariance\x12&\n" +
	"\x0fbeam_loss_ratio\x18\x11 \x01(\x01R\rbeamLossRatio\x12(\n" +
	"\x10gvm_charge_slope\x18\x12 \x01(\x01R\x0egvmChargeSlope\x12.\n" +
	"\x13gvm_charge_variance\x18\x13 \x01(\x01R\x11gvmChargeVariance\x124\n" +
	"\x16gvm_charge_correlation\x18\x14 \x01(\x01R\x14gvmChargeCorrelation\x120\n" +
	"\x14charge_current_slope\x18\x15 \x01(\x01R\x12chargeCurrentSlope\x126\n" +
	"\x17charge_current_variance\x18\x16 \x01(\x01R\x15chargeCurrentVariance\x12\x1b\n" +
	"\tgvm_slope\x18\x17 \x01(\x01R\bgvmSlope\x12!\n" +
	"\fgvm_variance\x18\x18 \x01(\x01R\vgvmVariance\x12(\n" +
	"\x10le_he_difference\x18\x1a \x01(\x01R\x0eleHeDifference\x12.\n" +
	"\x13probe_current_slope\x18\x1b \x01(\x01R\x11probeCurrentSlope\x124\n" +
	"\x16probe_current_variance\x18\x1c \x01(\x01R\x14probeCurrentVariance\x12\x17\n" +
	"\ascore_1\x18\x1d \x01(\x01R\x06score1\x12\x17\n" +
	"\ascore_2\x18\x1e \x01(\x01R\x06score2\x12\x17\n" +
	"\ascore_3\x18\x1f \x01(\x01R\x06score3\x12\x17\n" +
	"\ascore_4\x18  \x01(\x01R\x06score4\x12\x17\n" +
	"\ascore_5\x18! \x01(\x01R\x06score5\x12'\n" +
	"\x0fstability_score\x18\x19 \x01(\x01R\x0estabilityScore2\x82\x01\n" +
	"\rTandemService\x127\n" +
	"\aGetData\x12\x16.google.protobuf.Empty\x1a\x12.tandem.TandemData0\x01\x128\n" +
	"\bSendData\x12\x12.tandem.TandemData\x1a\x16.google.protobuf.Empty(\x01B\x1dZ\x1btandem-data-server/pkg/grpcb\x06proto3"

var (
	file_tandem_proto_rawDescOnce sync.Once
	file_tandem_proto_rawDescData []byte
)

func file_tandem_proto_rawDescGZIP() []byte {
	file_tandem_proto_rawDescOnce.Do(func() {
		file_tandem_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tandem_proto_rawDesc), len(file_tandem_proto_rawDesc)))
	})
	return file_tandem_proto_rawDescData
}

var file_tandem_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tandem_proto_goTypes = []any{
	(*TandemData)(nil),            // 0: tandem.TandemData
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 2: google.protobuf.Empty
}
var file_tandem_proto_depIdxs = []int32{
	1, // 0: tandem.TandemData.timestamp:type_name -> google.protobuf.Timestamp
	2, // 1: tandem.TandemService.GetData:input_type -> google.protobuf.Empty
	0, // 2: tandem.TandemService.SendData:input_type -> tandem.TandemData
	0, // 3: tandem.TandemService.GetData:output_type -> tandem.TandemData
	2, // 4: tandem.TandemService.SendData:output_type -> google.protobuf.Empty
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_tandem_proto_init() }
func file_tandem_proto_init() {
	if File_tandem_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tandem_proto_rawDesc), len(file_tandem_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tandem_proto_goTypes,
		DependencyIndexes: file_tandem_proto_depIdxs,
		MessageInfos:      file_tandem_proto_msgTypes,
	}.Build()
	File_tandem_proto = out.File
	file_tandem_proto_goTypes = nil
	file_tandem_proto_depIdxs = nil
}
